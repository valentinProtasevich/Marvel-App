{"version":3,"sources":["components/comicsList/ComicsList.js","components/pages/ComicsPage.js","components/errorMessage/error.gif","components/errorMessage/ErrorMessage.js","services/MarvelService.js","hooks/http.hook.js","resources/img/Avengers.png","resources/img/Avengers_logo.png","components/appBanner/AppBanner.js"],"names":["setContent","process","Component","newItemLoading","Spinner","ErrorMessage","Error","ComicsList","useState","comicsList","setComicsList","setNewItemLoading","offset","setOffset","comicsEnded","setComicsEnded","useMarvelService","getAllComics","setProcess","useEffect","onRequest","initial","then","onComicsListLoaded","newComicsList","ended","length","className","arr","items","map","item","i","CSSTransition","timeout","classNames","to","id","src","thumbnail","alt","title","price","TransitionGroup","component","renderItems","disabled","style","onClick","ComicsPage","Helmet","name","content","AppBanner","display","width","height","objectFit","margin","img","request","useCallback","url","a","method","body","headers","fetch","response","ok","status","json","data","clearError","useHttp","_apiBase","_apiKey","_baseOffset","getAllCharacters","res","results","_transformCharacter","getCharacterByName","getCharacter","_transformComics","getComic","char","description","slice","path","extension","homepage","urls","wiki","comics","pageCount","prices","language","textObjects","avengers","avengersLogo"],"mappings":"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","file":"static/js/8.ec4a27f9.chunk.js","sourcesContent":["import { useState, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\nimport {CSSTransition, TransitionGroup} from 'react-transition-group';\n\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\nimport useMarvelService from '../../services/MarvelService';\n\nimport './comicsList.scss';\n\nconst setContent = (process, Component, newItemLoading) => {\n    switch (process) {\n        case 'waiting':\n            return <Spinner/>;\n            break;\n        case 'loading':\n            return newItemLoading ? <Component/> : <Spinner/>;\n            break;\n        case 'confirmed':\n            return <Component/>;\n            break;\n        case 'error':\n            return <ErrorMessage/>;\n            break;\n        default:\n            throw new Error('Unexpected process state');\n    }\n}\n\nconst ComicsList = () => {\n    \n    const [comicsList, setComicsList] = useState([]);\n    const [newItemLoading, setNewItemLoading] = useState(false);\n    const [offset, setOffset] = useState(100);\n    const [comicsEnded, setComicsEnded] = useState(false);\n\n    const {getAllComics, process, setProcess} = useMarvelService();\n\n    useEffect(() => {\n        onRequest(offset, true);\n    }, []);\n\n    const onRequest = (offset, initial) => {\n        initial ? setNewItemLoading(false) : setNewItemLoading(true);\n        getAllComics(offset)\n            .then(onComicsListLoaded)\n            .then(() => setProcess('confirmed'));\n    }\n\n    const onComicsListLoaded = (newComicsList) => {\n        let ended = false;\n        if (newComicsList.length < 8) {\n            ended = true;\n        }\n\n        setComicsList([...comicsList, ...newComicsList]);\n        setNewItemLoading(false);\n        setOffset(offset + 8);\n        setComicsEnded(ended);\n    }\n\n    function renderItems(arr) {\n        const items = arr.map((item, i) => {\n            return (\n                <CSSTransition key={item.id} timeout={500} classNames=\"comics__item\">\n                    <li \n                        className=\"comics__item\"\n                        key={i}\n                        >\n                        <Link to={`/comics/${item.id}`}>\n                            <img src={item.thumbnail} alt={item.title} className=\"comics__item-img\"/>\n                            <div className=\"comics__item-name\">{item.title}</div>\n                            <div className=\"comics__item-price\">{item.price}</div>\n                        </Link>\n                    </li>\n                </CSSTransition>\n                \n            )\n        });\n\n        return (\n            <ul className=\"comics__grid\">\n                <TransitionGroup component={null}>\n                    {items}\n                </TransitionGroup>\n            </ul>\n        )\n    }\n\n    return (\n        <div className=\"comics__list\">\n            {setContent(process, () => renderItems(comicsList), newItemLoading)}\n            <button \n                className=\"button button__main button__long\"\n                disabled={newItemLoading}\n                style={{'display': comicsEnded ? 'none' : 'block'}}\n                onClick={() => onRequest(offset)}>\n                <div className=\"inner\">load more</div>\n            </button>\n        </div>\n    )\n}\n\nexport default ComicsList;","import { Helmet } from \"react-helmet\";\r\n\r\nimport ComicsList from '../comicsList/ComicsList';\r\nimport AppBanner from \"../appBanner/AppBanner\";\r\n\r\nconst ComicsPage = () => {\r\n  return (\r\n    <>\r\n      <Helmet>\r\n        <meta\r\n          name=\"description\"\r\n          content=\"Page with list of our comics\"\r\n        />\r\n        <title>Comics page</title>\r\n      </Helmet>\r\n      <AppBanner/>\r\n      <ComicsList/>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default ComicsPage;","export default __webpack_public_path__ + \"static/media/error.42292aa1.gif\";","import img from './error.gif';\r\n\r\nconst ErrorMessage = () => {\r\n  return (\r\n    <img style={{display: 'block', width: '250px', height: '250px',\r\n    objectFit: 'contain', margin: '0 auto'}} src={img} alt='Error'/>\r\n  )\r\n}\r\n\r\nexport default ErrorMessage;","import {useHttp} from '../hooks/http.hook';\r\n\r\nconst useMarvelService = () => {\r\n  const {request, clearError, process, setProcess} = useHttp();\r\n\r\n  const _apiBase = 'https://gateway.marvel.com:443/v1/public/';\r\n  const _apiKey = 'apikey=13b36871b85074be42d8554605915b72';\r\n  const _baseOffset = 210;\r\n\r\n  const getAllCharacters = async (offset = _baseOffset) => {\r\n    const res = await request(`${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`);\r\n    return res.data.results.map(_transformCharacter);\r\n  }\r\n\r\n  const getCharacterByName = async (name) => {\r\n    const res = await request(`${_apiBase}characters?name=${name}&${_apiKey}`);\r\n    return res.data.results.map(_transformCharacter);\r\n}\r\n\r\n  const getCharacter = async (id) => {\r\n    const res = await request(`${_apiBase}characters/${id}?${_apiKey}`);\r\n    return _transformCharacter(res.data.results[0]);\r\n  }\r\n\r\n  const getAllComics = async (offset = _baseOffset) => {\r\n    const res = await request(`${_apiBase}comics?orderBy=issueNumber&limit=8&offset=${offset}&${_apiKey}`);\r\n    return res.data.results.map(_transformComics)\r\n  }\r\n\r\n  const getComic = async (id) => {\r\n    const res = await request(`${_apiBase}comics/${id}?${_apiKey}`);\r\n    return _transformComics(res.data.results[0]);\r\n  }\r\n\r\n  const _transformCharacter = (char) => {\r\n    return {\r\n        id: char.id,\r\n        name: char.name,\r\n        description: char.description ? `${char.description.slice(0, 210)}...` : 'There is no description for this character',\r\n        thumbnail: char.thumbnail.path + '.' + char.thumbnail.extension,\r\n        homepage: char.urls[0].url,\r\n        wiki: char.urls[1].url,\r\n        comics: char.comics.items\r\n    }\r\n  }\r\n\r\n  const _transformComics = (comics) => {\r\n    return {\r\n      id: comics.id,\r\n      title: comics.title,\r\n      description: comics.description || 'There is no description',\r\n      pageCount: comics.pageCount ? `${comics.pageCount} p.` : 'No information about the number of pages',\r\n      price: comics.prices[0].price ? `${comics.prices[0].price}$` : 'not available',\r\n      thumbnail: comics.thumbnail.path + '.' + comics.thumbnail.extension,\r\n      language: comics.textObjects.language || 'en-us'\r\n    }\r\n  }\r\n  \r\n  return { \r\n          clearError, \r\n          process, \r\n          setProcess,\r\n          getAllCharacters, \r\n          getCharacterByName, \r\n          getCharacter, \r\n          getAllComics, \r\n          getComic}\r\n}\r\n\r\nexport default useMarvelService;","import { useState, useCallback } from \"react\";\r\n\r\nexport const useHttp = () => {\r\n  const [process, setProcess] = useState('waiting');\r\n\r\n  const request = useCallback(async (url, method = 'GET', body = null, headers = {'Content-Type': 'application/json'}) => {\r\n\r\n    setProcess('loading');\r\n\r\n    try {\r\n      const response = await fetch(url, {method, body, headers});\r\n      \r\n      if (!response.ok) {\r\n        throw new Error(`Could not fetch ${url}, status: ${response.status}`);\r\n      }\r\n      \r\n      const data = await response.json();\r\n\r\n      return data;\r\n    } catch(e) {\r\n      setProcess('error');\r\n      throw e;\r\n    }\r\n  }, []);\r\n\r\n  const clearError = useCallback(() => {\r\n    setProcess('loading');\r\n  }, []);\r\n\r\n  return {request, clearError, process, setProcess}\r\n}","export default __webpack_public_path__ + \"static/media/Avengers.4065c8f9.png\";","export default __webpack_public_path__ + \"static/media/Avengers_logo.9eaf2193.png\";","import './appBanner.scss';\nimport avengers from '../../resources/img/Avengers.png';\nimport avengersLogo from '../../resources/img/Avengers_logo.png';\n\nconst AppBanner = () => {\n    return (\n        <div className=\"app__banner\">\n            <img src={avengers} alt=\"Avengers\"/>\n            <div className=\"app__banner-text\">\n                New comics every week!<br/>\n                Stay tuned!\n            </div>\n            <img src={avengersLogo} alt=\"Avengers logo\"/>\n        </div>\n    )\n}\n\nexport default AppBanner;"],"sourceRoot":""}